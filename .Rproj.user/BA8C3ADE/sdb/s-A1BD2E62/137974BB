{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R & The Graphical Web\"\nauthor: \"Bob Rudis (@hrbrmstr)\"\noutput:\n  ioslides_presentation:\n    css: styles.css\n    highlight: pygments\n    incremental: yes\n    keep_md: yes\n    widescreen: yes\n  slidy_presentation:\n    incremental: yes\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE,\n                      error = FALSE)\n```\n\n# Who Am I?\n\n## {.flexbox .vcenter}\n\n<http://dds.ec/> (blog, podcast and…)\n\n![book](img/ddsec.jpg)\n\n## {.flexbox .vcenter}\n\nAuthored/contributed to 12 CRAN packages\n\n![cran](img/mran.png)\n\n##\n\n- <http://rud.is/b> Less infosec, more R & vis\n- <http://twitter.com/hrbrmstr>\n- <http://github.com/hrbrmstr>\n- <bob@rudis.net> (if you like waiting for responses)\n\n## How You May View R\n\n<div class=\"notes\">\nASK: How many of you are familiar with R (heard of it/used it)?\n\nI suspect that for those who have only heard about it this may be your view of R.\n</div>\n\n```{r view1, echo=TRUE}\nhead(pressure, 3)\n\nsummary(pressure)\n```\n\n## How You May View R\n<div class=\"notes\">\nor this\n</div>\n\n```{r pressure}\nlibrary(magrittr)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(lubridate) \nlibrary(stringr)\nlibrary(jsonlite)\nlibrary(scales)\nplot(pressure)\n```\n\n## How [I Hope] You Will View R  {.flexbox .vcenter}\n<div class=\"notes\">\nAfter this workshop, this is how I hope you view R. As something that can help you make this.\n\nMOVE IT AROUND\n</div>\n\n```{r three1}\nlibrary(threejs)\nz <- seq(-10, 10, 0.01)\nx <- cos(z)\ny <- sin(z)\nscatterplot3js(x,y,z, color=rainbow(length(z)))\n```\n\n## \n<div class=\"notes\">\n(with one line of code)\n</div>\n\n```{r three2, eval=FALSE, echo=TRUE}\nz <- seq(-10, 10, 0.01)\nscatterplot3js(cos(z), sin(z), z, color=rainbow(length(z)))\n```\n\n## How [I Hope] You Will View R  {.flexbox .vcenter}\n<div class=\"notes\">\nOr this\n\nDRAG A FEW NODES\n</div>\n\n```{r net1}\nlibrary(networkD3)\ndata(MisLinks, MisNodes)\nforceNetwork(Links = MisLinks, Nodes = MisNodes, Source = \"source\",\n             Target = \"target\", Value = \"value\", NodeID = \"name\",\n             Group = \"group\", opacity = 0.4)\n```\n\n## \n<div class=\"notes\">\nwith one line function call\n</div>\n\n```{r net2, eval=FALSE, echo=TRUE}\nforceNetwork(Links = MisLinks, Nodes = MisNodes, Source = \"source\",\n             Target = \"target\", Value = \"value\", NodeID = \"name\",\n             Group = \"group\", opacity = 0.4)\n```\n\n##  {.flexbox .vcenter}\n<div class=\"notes\">\nor even this\n\nDRAG GLOBE AROUND\n</div>\n\n```{r globe1}\ndata(flights)\ndest <- factor(sprintf(\"%.2f:%.2f\",flights[,3], flights[,4]))\nfreq <- sort(table(dest), decreasing=TRUE)\nfrequent_destinations <- names(freq)[1:10]\nidx <- dest %in% frequent_destinations\nfrequent_flights <- flights[idx, ]\nlatlong <- unique(frequent_flights[,3:4])\nearth <- system.file(\"images/world.jpg\",  package=\"threejs\")\nglobejs(img=earth, lat=latlong[,1], long=latlong[,2], arcs=frequent_flights,\n        arcsHeight=0.3, arcsLwd=2, arcsColor=\"#ffff00\", arcsOpacity=0.15,\n        atmosphere=TRUE)\n```\n\n##\n<div class=\"notes\">\nOK, so that took 8 instructions.\n</div>\n\n```{r globe2, echo=TRUE, eval=FALSE}\ndest <- factor(sprintf(\"%.2f:%.2f\",flights[,3], flights[,4]))\nfreq <- sort(table(dest), decreasing=TRUE)\nfrequent_destinations <- names(freq)[1:10]\nidx <- dest %in% frequent_destinations\nfrequent_flights <- flights[idx, ]\nlatlong <- unique(frequent_flights[,3:4])\nearth <- system.file(\"images/world.jpg\",  package=\"threejs\")\nglobejs(img=earth, lat=latlong[,1], long=latlong[,2], \n        arcs=frequent_flights, arcsHeight=0.3, arcsLwd=2, \n        arcsColor=\"#ffff00\", arcsOpacity=0.15, atmosphere=TRUE)\n```\n\n# What is R?\n\n## What is R?\n<div class=\"notes\">\nBesides being a truly awesome letter of the alphabet (my formal initials are RR), R has a myriad of uses.\nYes, it's a programming language, but it was made by stats nerds, so it's _really_ good at stats. But those\nstats nerds needed good ways to see and present the data, so R is also _really_ good at static visualiztions. And,\nall those folks hung out on GeoCities and the BLINK tag, so they naturally wanted to make sure R could keep up with \nall the cool kids using these modern web visualization frameworks. Plus, R has a vibrant community (Stack Overflow, Twitter, mailing lists, GitHub, etc.)\n</div>\n<div class=\"columns-2\">\n- R is a programming language\n- R is statistical software\n- R is an environment for interactive data analysis+visualization\n- R is a community <br/>\n\n![rlogo](img/Rlogo.png)\n</div>\n\n## What is R's Relationship with TGW?  {.flexbox .vcenter}\n<div class=\"notes\">\nR made those SVG ovals and this entire HTML presentation, btw\n</div>\n```{r dgrm1, results=\"asis\"}\n\nlibrary(htmlwidgets)\nlibrary(DiagrammeR)\nnodes <- create_nodes(nodes=c(\"Acquire\", \"Transform\", \"Analyze\", \"Visualize\"),\n                      style=\"filled\",\n                      fontname=\"Montserrat\",\n                      penwidth=0.5,\n                      color=\"#7f7f7f\",\n                      fillcolor=c(\"#7fc97f\", \"#beaed4\", \"#fdc086\", \"#ffff99\"))\ncat(render_graph(create_graph(nodes), output=\"SVG\", width=900, height=200))\n```\n\n<br/>\n\n- R can help you **access/acquire, clean and reformat data**\n- R lets you **statistically analyze** data to find **insights**\n- R enables **rapid, iterative protyping** of visualizations to help **communicate** those insights\n- R helps make those steps **organized** and **repeatable/reproducible**\n\n## {.flexbox .vcenter}\n<div class=\"notes\">\nI view R as both a consumer of the elements that go into the graphical web (i.e. data)\n</div>\n![consumer](img/consumer.jpg)\n\n## {.flexbox .vcenter}\n<div class=\"notes\">\nand a producer of the graphical web\n</div>\n![producer](img/producer.jpg)\n\n## Getting Started with R {.flexbox .vcenter}\n<div class=\"notes\">\nDo not let this 1990's era web page fool you. R's _really_ good at decorating HTML!\n\nGo to the url and grab R for your platform and install it. There are hundreds of mirrors, but RStudio has a really fast one and they are super awesome to the community.\n</div>\n<http://cran.rstudio.com>\n\n![dlr](img/download_r.png)\n\n## Getting Started with R/RStudio {.flexbox .vcenter}\n<div class=\"notes\">\nRStudio is an IDE for R. It's actually just an app wrapper around a webkit application (yes the entire IDE is just webkit components) and uses\nthe ACE editor. R is completely usable without RStudio. \n</div>\n\n<https://www.rstudio.com/products/rstudio/download/>\n\n![dlrs](img/download_rstudio.png)\n\n## {.flexbox .vcenter}\n<div class=\"notes\">\nThink of RStudio as R's \"bacon\" (it makes everyting better with R)\n</div>\n![bacon](img/bacon.jpg)\n\n## RStudio {.flexbox .vcenter}\n<div class=\"notes\">\nRather than have to jerry rig a REPL connection with an editor like Sublime Text / vim / emacs or cut/paste code, you have a full environment with a syntax-aware editor (and data-context-aware editor), built-in browser & graphics viewer and an instant feedback console for when you are working with code. Since it's based on ACE, it also recognizes and formats HTML, JavaScript, CSS, and Markdown.\n</div>\n![rs1](img/RStudio.png)\n\n## RStudio {.flexbox .vcenter}\n<div class=\"notes\">\nIt also has a built-in data and environment viewer, so you can see the structure of what you're working with and what data you've already processed.\n</div>\n![rs2](img/RStudio2.png)\n<div class=\"notes\">\nI can't teach you R in a 1.5hr session, but I can hopefully give you enough of a taste to get you excited to learn it. While there are definitely some idiosyncratic things about R, it (should) seem familiar to you. It is dynamic (so you can just \"start working\" in it without worrying about compilers and such), it has variables, functions and extra pacakges to make working with the \"world\" easier.\n</div>\n## R is Familiar\n- Dynamic (like JavasScript & Python)\n- Has variables  (like JavasScript & Python)\n- …functions (like JavaScript & Python)\n- …loops (like JavaScript & Python)\n- …and, help from friends (packages) (like Node or Python modules)\n\n## R is Different\n\nIt's \"vectorized\" (think `map()` or `[ for ]`)\n\n```{r echo=TRUE}\na <- 1:10\nsum(a)\n```\n\n\n## R is Different\n<div style=\"notes\">\nData frames are akin to Excel/Google spreadsheets, just without the baggage\n</div>\nIt _really_ likes something called \"data frames\" (Python does too, now)\n\n```{r echo=TRUE}\nhead(iris)\n```\n\n## R is Different\n\nIt has affintity for arcane punctuation:\n\n```{r echo=TRUE}\n`huh?` <- iris$Sepal.Length[[2]] * 3 %>% sqrt()\nprint(`huh?`)\n```\n\n## R is Different\n<div class=\"notes\">\nBut it's worth suffering through the period where R rewrites your neural pathways! Every language has a learning curve. R's learning curve may be a bit higher (for some things) but you've already seen that you can do pretty amazing things with just one function call, so it is absolutely worth the journey.\n</div>\nAnd, complex+efficient algorithms can be confusing:\n\n```{r echo=TRUE}\ndat <- readLines(textConnection(\" 3   weeks,   2  days,  4 hours\n 4 week,  6 days,  12 hours \n4 day, 3 hours\n 7 hours\n8  hour\"))\n\nsapply(str_split(str_trim(dat), \",[ ]*\"), function(x) {\n  sum(sapply(x, function(y) {\n    bits <- str_split(str_trim(y), \"[ ]+\")[[1]]\n    duration(as.numeric(bits[1]), bits[2])\n  })) / 3600\n})\n```\n\n## R & The Graphical Web\n<div class=\"notes\">\nR can be part of your graphical web workflow even without delving into fancy HTML & JavaScript libraries/packages. This is a graphic generated with the ggplot2 package which we've told R we want to use via the \"library\" call. The \"gg\" stands for Grammar of Graphics (Wikinson) and is just a structured way of creating (statistical) graphics. \"mtcars\" is a built-in data set in R and has data about cars (era 1973/4). It's great for demos. Here we've plotted car weight vs miles per gallon and added a smoothed line to help us understand the relationship between them better. We create the chart, assign it to a variable and then show it.\n</div>\n\n```{r ggsvg1, echo=TRUE}\nlibrary(ggplot2)\ng1 <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_smooth() + geom_point()\nprint(g1)\n```\n\n##\nThis is all it takes to turn that plot into an editable/usable SVG graphic:\n\n```{r eval=FALSE, echo=TRUE}\nggsave(g1, \"img/g1.svg\")\n```\n\n<img src=\"img/g1.svg\" width=700/>\n\n##\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" \n         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        width=\"819pt\" height=\"425pt\" \n        viewBox=\"0 0 819 425\" version=\"1.1\">\n    <defs>\n    <g>\n    <symbol overflow=\"visible\" id=\"glyph0-0\">\n    <path style=\"stroke:none;\" \n          d=\"M 0.3125 0 L 0.3125 -6.875 L 5.765625 -6.875 L 5.765625 0 Z M 4.90625 -0.859375 L 4.90625 -6.015625 L 1.171875 -6.015625 L 1.171875 -0.859375 Z \"/>\n    </symbol>\n    <symbol overflow=\"visible\" id=\"glyph0-1\">\n    <path style=\"stroke:none;\" \n          d=\"M 0.921875 -4.75 L 0.921875 -5.390625 C 1.523438 -5.453125 1.945312 -5.550781 2.1875 -5.6875 C 2.425781 -5.832031 2.609375 -6.164062 2.734375 -6.6875 L 3.390625 -6.6875 L 3.390625 0 L 2.5 0 L 2.5 -4.75 Z \"/>\n\n##\n<div class=\"notes\">\nggplot can be sued to highly customze/stylize the aesthetics of a plot before exporting it, so it can save you alot of time if you create scripted workflows to generate SVGs.\n</div>\n\n```{r ggsvg2, echo=TRUE}\nlibrary(ggthemes)\ng1 + theme_economist()\n```\n\n##\n\n```{r ggsvg3, echo=TRUE}\nlibrary(xkcd)\ng1 + theme_xkcd()\n```\n\n\n##\n<div class=\"notes\">\nOr, if you have to stick it on an enterprise intranet site…\n</div>\n```{r ggsvg4, echo=TRUE}\ng1 + theme_excel()\n```\n\n# Doing Real Work\n\n## Doing Real Work  {.flexbox .vcenter}\n<div class=\"notes\">\nWe rarely have the opportunity to work with pristene, built-in data sets like those examples. Plus, while you may have need to generate static SVGs for your web workflows, the \"graphical web\" cries out for interactivity. Let's work though a complete example of R helping us get data from the web, crunch it so we can use it and display it interactively. One common task for this is to present an interactive map to folks. I really like the Pew foundation and follow what they do both research & vis-wise. They had an article up last month on \"where paychecks stretch the most/least\" and inclued the map you see. Don't get me wrong, it's a good map. But wouldn't it be better if we could zoom in and see discrete information about individual metropolitan areas?\n</div>\n<http://bit.ly/pewmapdemo+>\n\n![pewmap](img/pewmap.png)\n\n## Doing Real Work {.flexbox .vcenter}\nLet's find this data!\n\n![bea](img/bea_1.png)\n\n## Doing Real Work {.flexbox .vcenter}\nLet's find this data!\n\n![bea](img/bea_2.png)\n\n## Doing Real Work {.flexbox .vcenter}\nLet's find this data!\n\n![bea](img/bea_3.png)\n\n## Doing Real Work {.flexbox .vcenter}\n\n*Almost done!*\n\n![bea](img/bea_4.png)\n\n## Doing Real Work {.flexbox .vcenter}\n**Done!** *(kinda)*\n\n![bea](img/bea_5.png)\n\n## Doing Real Work {.flexbox .vcenter}\n<div class=\"notes\">\nThere's \"junk\" at the beginning and end of this, so we'll have to do some cleanup.\n</div>\n**Done!** *(kinda)*\n\n![bea](img/download_csv.png)\n\n##\n<div class=\"notes\">\nWe can automate this cleaning by telling R to skip the first 4 lines and delete the last two lines. The \"stringsAsFactors\" parameter isn't worth going into now, but it's generally an option you'll always want to use when reading in structured data into R. We can see here that we have 3 columns of data. Column Two \"GeoName\" has that useless redundant bit so let's get rid of it.\n</div>\n```{r echo=TRUE}\ndat <- read.csv(\"data/download.csv\", skip=4, header=TRUE, stringsAsFactors=FALSE)\ndat <- head(dat, -2)\nhead(dat)\n```\n\n\n##\n<div class=\"notes\">\nThe \"GeoFips\" column also got read as a number by R. This isn't a bad thing and we could have told R to read it in as-is, but we can convert it just as easily. You'll also notice that R added an X to the column name. That's not completely necessary, but it makes working with the name much easier.\n</div>\n```{r echo=TRUE}\ndat$GeoName <- gsub(\" \\\\(Metropolitan Statistical Area\\\\)\", \"\", \n                    dat$GeoName)\ndat$GeoFips <- sprintf(\"%05d\", as.numeric(dat$GeoFips))\nhead(dat)\n```\n\n## Doing Real Work {.flexbox .vcenter}\n<div class=\"notes\">\nWe're going to pause for a moment. This hasn't been too bad, but what if you realized you also needed 2012 data. And then in a couple weeks someone asked for 2011 data. Going back to the web form again and again is tedious and not productive. If we spend just a bit more time, we'll see that the BEA has a (pretty good) API.\n</div>\n\n![bea](img/bea_api.png)\n\n## Doing Real Work {.flexbox .vcenter}\n<div class=\"notes\">\nIf we register with them and get an API key, we can test out a query for this RPP data. It's a gosh awful URL, though.\n</div>\n\n    http://bea.gov/api/data/?UserID=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx&\n    method=GetData&datasetname=RegionalData&KeyCode=RPPALL_MI&\n    Year=2013&&ResultFormat=json\"\n\n![bea](img/bea_json.png)\n\n## Doing Real Work\n<div class=\"notes\">\nWe can use fromJSON in the jsonlite package to use that URL directly then navigate down to the actual data element (the $ is like . in javascript & python) and make a numeric column out of the data that R read in as a string. I'm using a different (really creating a new) column name to match what we did with with CSV Reading\n</div>\n\n```{r include=FALSE, echo=FALSE}\ndat <- fromJSON(sprintf(\"http://bea.gov/api/data/?UserID=%s&method=GetData&datasetname=RegionalData&KeyCode=RPPALL_MI&Year=2013&&ResultFormat=json\", Sys.getenv(\"BEA_API_TOKEN\")))\n```\n\n```{r eval=FALSE, echo=TRUE}\nlibrary(jsonlite)\ndat <- readJSON(\"that horrible URL\")\n```\n```{r echo=TRUE}\ndat <- dat$BEAAPI$Results$Data\ndat$X2013 <- as.numeric(dat$DataValue)\ndat$GeoName <- gsub(\" \\\\(Metropolitan Statistical Area\\\\)\", \"\", \n                    dat$GeoName)\ndat$GeoFips <- sprintf(\"%05d\", as.numeric(dat$GeoFips))\nhead(dat[,c(1,2,8)])\n```\n\n## Doing Real Work\n<div class=\"notes\">\nBut the fact that the BEA has a structured API means that we can do better than keep a cache of ugly URLs around. R has a package called \"httr\" that kinda works a bit like the command line curl program or the Python requests module or node request module. By breaking out the URL into components here, we could even create a function or package that works with the BEA data, making it super-easy to get data in the future. You'll also notice I stored the BEA API token in an environment variable. R uses the environment variables on each OS it runs on and augments them with it's own .Renviron file so you can be platform independent in how you set them.\n</div>\n```{r echo=TRUE}\nlibrary(httr)\nresponse <- GET(\"http://bea.gov/api/data/\",\n                query=list(\n                  UserID=Sys.getenv(\"BEA_API_TOKEN\"),\n                  method=\"GetData\",\n                  datasetname=\"RegionalData\",\n                  KeyCode=\"RPPALL_MI\",\n                  Year=\"2013\",\n                  ResultFormat=\"json\"\n                ))\ndat <- fromJSON(content(response, as=\"text\"))\n```\n\n## \n\nSame cleanup as we did in the raw URL version\n\n```{r echo=TRUE}\ndat <- dat$BEAAPI$Results$Data\ndat$X2013 <- as.numeric(dat$DataValue)\ndat$GeoName <- gsub(\" \\\\(Metropolitan Statistical Area\\\\)\", \"\", \n                    dat$GeoName)\ndat$GeoFips <- sprintf(\"%05d\", as.numeric(dat$GeoFips))\nhead(dat[,c(1,2,8)])\n```\n\n\n## Doing Real Work\n<div class=\"notes\">\nSo we have the data but we have a problem. the BEA uses Census numbers for the metro areas but most of the maps we'd be able to use understand county FIPS codes. We have to convert between them. Luckily there's a package for that. The \"noncensus\" package gives us the data we need to do the translation.\n</div>\n\n```{r echo=TRUE}\nlibrary(noncensus)\ndata(counties)\nxlate <- data.frame(fipscounty=sprintf(\"%s%s\", counties$state_fips, \n                                       counties$county_fips), \n                    cbsa=counties$CBSA,\n                    stringsAsFactors=FALSE)\ndat <- merge(dat[,c(1,2,8)], xlate[,c(\"cbsa\", \"fipscounty\")], \n             by.x=\"GeoFips\", by.y=\"cbsa\")\nhead(dat)\n```\n\n## Doing Real Work {.flexbox .vcenter}\n<div class=\"notes\">\nWe'll use some map data from a friend of all of us since it's readily available and a single, clean file vs a a complex zipped ESRI shapefile.\n</div>\n\n![topo](img/ustopojson.png)\n\n## What's the Plan?\n\n- Display a US map county choropleth with the counties filled according the RPP value\n- The counties are not all represented and we don't need a billion small polygons left over so we'll outline the states for context\n- We'd like to add contextual information via popup to show the discrete data value and the name of the metro area\n- A legend would be good\n\n## Options (without R)\n<div class=\"notes\">\nWe have tons of options in general for doing interactive chropleths in-browser. I've ordered them in my opinion of most to least work. \n</div>\n\n- Raw JS or jQuery + CSS\n- Straight D3\n- Kartograph\n- Datamaps\n- Leaflet [Ex: <http://leafletjs.com/examples/choropleth-example.html>] (Perfect data. ~170 lines)\n\n## Getting Work Done : R + Leaflet\n\nGet map data\n\n```{r echo=TRUE}\nlibrary(rgdal)\nURL <- \"http://bl.ocks.org/mbostock/raw/4090846/us.json\"\nfil <- sprintf(\"data/%s\", basename(URL))\nif (!file.exists(fil)) download.file(URL, fil)\n\n# read state borders from the file\nstates <- readOGR(fil, \"states\", stringsAsFactors=FALSE, \n                  verbose=FALSE)\n\n# read county borders from the file\ncounty <- readOGR(fil, \"counties\", stringsAsFactors=FALSE, \n                  verbose=FALSE)\n```\n\n## Getting Work Done : R + Leaflet\n\nWe don't want to display all the counties, so we'll subtract out the ones that aren't in our data set.\n\n```{r echo=TRUE}\nrpp_counties <- subset(county, id %in% dat$fipscounty)\nrpp_counties <- merge(rpp_counties, dat, \n                      by.x=\"id\", \n                      by.y=\"fipscounty\", \n                      all.x=TRUE)\n```\n\n## Getting Work Done : R + Leaflet\n\nWe need to setup the color scale (really similar to how you'd do it in JS)\n\n```{r echo=TRUE}\nlibrary(leaflet)\npal <- colorBin(\"BrBG\", range(rpp_counties$X2013), bins=5)\nrpp_counties$color <- pal(rpp_counties$X2013)\n```\n\n## Getting Work Done : R + Leaflet\n\n```{r echo=TRUE, eval=FALSE}\nleaflet() %>%\n  addProviderTiles(\"Acetate.terrain\") %>%\n  addPolygons(data=rpp_counties, weight=0.25,\n              fillColor=~color, color=\"black\", fillOpacity=1,\n              popup=~sprintf(\"In %s, <span style='font-weight:700'>%s</span> has the purchasing power of $100.00.\",\n                             htmlEscape(GeoName),\n                             htmlEscape(dollar(X2013)))) %>%\n  addPolygons(data=states, weight=0.5, fillColor=\"white\", fillOpacity=0, fill=FALSE, color=\"#525252\") %>%\n  addLegend(position=\"bottomright\", pal=pal, values=rpp_counties$X2013, labFormat=labelFormat(\"$\"), opacity = 1) %>%\n  setView(-74.0059, 40.7127, 6)\n```\n## Where Paychecks Stretch The Most/Least\n\n```{r echo=FALSE}\nleaflet() %>%\n  addProviderTiles(\"Acetate.terrain\") %>%\n  addPolygons(data=rpp_counties, weight=0.25,\n              fillColor=~color, color=\"black\", fillOpacity=1,\n              popup=~sprintf(\"In %s, <span style='font-weight:700'>%s</span> has the purchasing power of $100.00.\",\n                             htmlEscape(GeoName),\n                             htmlEscape(dollar(X2013)))) %>%\n  addPolygons(data=states, weight=0.5, fillColor=\"white\", fillOpacity=0, fill=FALSE, color=\"#525252\") %>%\n  addLegend(position=\"bottomright\", pal=pal, values=rpp_counties$X2013, labFormat=labelFormat(\"$\"), opacity = 1) %>%\n  setView(-74.0059, 40.7127, 6)\n```\n\n## Doing Real Work {.flexbox .vcenter}\n\n**~170 lines** pure leaflet/javascript\n\nvs \n\n**~60 lines of R**\n\n…and the R version can be instantly used to get new BEA data sets where the leaflet one \"cheated\" and merged the data prior to the HTML example.\n\n# A Bit More About Getting Data In\n\n## Getting Data Into R\n\n**General**\n\n- built-in support for CSV/TSV/general delimited & fixed-width\n- `readr` / `rio` faster & more robust compatibility\n- `readxl` (and others) for raw Excel reading\n- `googlesheets`\n- `data.table` (large data)\n- numerous packages to read statistical data files\n\n## Getting Data Into R\n\n**Web Scraping / API**\n\n- `httr` (like curl command line but better)\n- `rvest` (more structured web page scraping)\n- `jsonlite` (JSON)\n- `XML` / `xml2` (XML)\n- `Rselenium` (headless browser & DOM scraping)\n- `V8` (the V8 engine in R)\n\n## Getting Data Into R\n\n**Database**\n\n- `dplyr`\n- `RPostgreSQL`\n- `RMySQL`\n- `rredis`\n- `mongolite`\n- `RSQLite`\n\n## Getting Data Into R\n\n**Database**\n\n- `dplr`\n- `RPostgreSQL`\n- `RMySQL`\n- `rredis`\n- `mongolite`\n- `RSQLite`\n\n## Getting Data Into R\n\n- Almost every useful public API covered\n- Virtually every \"big data\" store including AWS/S3\n- If something is missing, complain on Twitter and there'll be a package in a week\n\n# Crunching Stats \n\n## Real World R : Crunching Stats {.flexbox .vcenter}\n\n<http://www.verizonenterprise.com/DBIR/2015/>\n\n![](img/hero.jpg)\n\n## Real World R : Crunching Stats {.flexbox .vcenter}\n\n**200,000** incidents/breaches\n\n**~3,000** data elements per record\n\n**~150** lines of statistical analysis\n\n## Real World R : Crunching Stats {.flexbox .vcenter}\n\n![](img/dbir19.png)\n\n## Real World R : Crunching Stats {.flexbox .vcenter}\n\n<http://vz-risk.github.io/dbir/2015/19/>\n\n# Getting Data Out of R\n\n## Getting Data Out of R\n\n- files (CSV/JSON/XML)\n- database write\n- S3 upload\n- API \"put\"\n\n## Getting Data Out of R {.flexbox .vcenter}\n\nOpenCPU\n\n![opencpu](img/opencpu.png)\n\n## Getting Data Out of R\n\n- `plumber` <http://plumber.trestletech.com/> (think \"Flask\")\n- `httpuv` <https://github.com/rstudio/httpuv> (basic web & websocket server)\n\n\n# Getting Data and Visualizations Out of R\n\n## Getting Data and Visualizations Out of R {.flexbox .vcenter}\n\nShiny <http://shiny.rstudio.com/>\n\n![shiny](img/movie-explorer.png)\n\n<http://shiny.rstudio.com/gallery/movie-explorer.html>\n\n## HTML Widgets\n<div class=\"notes\">\nThe previous technologies require you to have an \"R Server\" running at all times and much of the interaction still relies on R (with noticeable delays in some cases). HTML \"widgets\" bridge the gap by letting you create standalone html+js visualiations using R code with no requriement for R to be around when they are viewed/interacted with. The folks at RStudio (along with Kenton Rullell) developed the core package that enables building of these widgets.\n</div>\n\n- `htmlwidgets` <http://www.htmlwidgets.org/>\n- The widget gallery <http://hafen.github.io/htmlwidgetsgallery/> (i've got 3! 😎) \n- You've already seen one! (`leaflet`)\n\n## htmlwidgets\n<div class=\"notes\">\nOne more before we get into the details.\n</div>\n```{r echo=TRUE, eval=FALSE}\n library(taucharts)\ndata(cars_data)\ntauchart(cars_data) %>%\n  tau_point(\"milespergallon\", c(\"class\", \"price\"), color=\"class\") %>%\n  tau_trendline() %>% tau_legend()\n```\n\n## htmlwidgets {.flexbox .vcenter}\n<div class=\"notes\">\nOne more before we get into the details.\n</div>\n```{r echo=FALSE}\nlibrary(taucharts)\ndata(cars_data)\ntauchart(cars_data, width=700) %>%\n  tau_point(\"milespergallon\", c(\"class\", \"price\"), color=\"class\") %>%\n  tau_trendline() %>% tau_legend()\n```\n\n## htmlwidgets\n\n- `devtools::create(\"/path/to/new/package\")`\n- `setwd(\"/path/to/new/package\")`\n\nor use RStudio\n\n- `htmlwidgets::scaffoldWidget()`\n\n## htmlwidgets\n\n- `devtools::build()`\n- `devtolls::install()`\n\nor use RStudio\n\n## htmlwidgets\n\n```{r eval=FALSE, echo=TRUE}\nlibrary(widgety)\nwidgety(\"Hello, world!\")\n```\n",
    "created" : 1443195074670.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "43073752",
    "id" : "137974BB",
    "lastKnownWriteTime" : 1443216832,
    "path" : "~/Development/graphical_web_2015/graphical_web_pres.Rmd",
    "project_path" : "graphical_web_pres.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}